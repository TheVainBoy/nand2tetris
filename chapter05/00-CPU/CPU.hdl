CHIP CPU {

    IN  inM[16],
        instruction[16],
        reset;

    OUT outM[16],
        writeM,
        addressM[15],
        pc[15];

    PARTS:

        // A command & A register
        Not(in=instruction[15], out=ACommand);
        Mux16(a=AluOutput, b=instruction, sel=ACommand, out=AInput);
        Or(a=ACommand, b=instruction[5], out=ALoad);
        ARegister(in=AInput, load=ALoad, out=A, out[0..14]=addressM);

        // A/M Mux
        Mux16(a=A, b=inM, sel=instruction[12], out=AorM);

        ALU(
            x=D, y=AorM,
            zx=instruction[11], nx=instruction[10],
            zy=instruction[9], ny=instruction[8],
            f=instruction[7],
            no=instruction[6],
            out=AluOutput, out=outM,
            zr=zero,
            ng=neg );

        // C command?
        Not(in=ACommand, out=CCommand);

        // D register
        And(a=CCommand, b=instruction[4], out=DLoad);
        DRegister(in=AluOutput, load=DLoad, out=D);

        // Write Memory
        And(a=CCommand, b=instruction[3], out=writeM);

        // Jump & Program Counter
        Or(a=neg, b=zero, out=lte);
        Not(in=lte, out=gt);
        And(a=instruction[0], b=gt, out=jmpGt);
        And(a=instruction[1], b=zero, out=jmpZero);
        And(a=instruction[2], b=neg, out=jmpLt);
        Or8Way(in[0]=jmpGt, in[1]=jmpZero, in[2]=jmpLt, out=jmpMatch);
        And(a=CCommand, b=jmpMatch, out=jmp);
        Not(in=jmp, out=inc);
        PC(in=A, load=jmp, inc=inc, reset=reset, out[0..14]=pc);

}
